import type { RoomSearchParams, AvailableRoomParams } from '~/types/room'

export const useRoomApi = () => {
  const config = useRuntimeConfig()
  const baseURL = config.public.roomServiceUrl || 'http://localhost:8087'
  
  console.log('üöÄ useRoomApi initialized with baseURL:', baseURL)

  // L·∫•y t·∫•t c·∫£ lo·∫°i ph√≤ng (room types)
  const getAllRoomTypes = async () => {
    try {
      console.log('üì° Fetching room types from:', `${baseURL}/api/rooms/types`)
      const response = await $fetch(`${baseURL}/api/rooms/types`)
      console.log('‚úÖ Room types response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching room types:', error)
      throw error
    }
  }

  // L·∫•y th·ªëng k√™ ph√≤ng
  const getRoomStatistics = async () => {
    try {
      console.log('üì° Fetching room statistics from:', `${baseURL}/api/rooms/statistics`)
      const response = await $fetch(`${baseURL}/api/rooms/statistics`)
      console.log('‚úÖ Room statistics response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching room statistics:', error)
      throw error
    }
  }

  // L·∫•y t·ªïng s·ªë ph√≤ng
  const getRoomCount = async () => {
    try {
      console.log('üì° Fetching room count from:', `${baseURL}/api/rooms/count`)
      const response = await $fetch(`${baseURL}/api/rooms/count`)
      console.log('‚úÖ Room count response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching room count:', error)
      throw error
    }
  }

  // L·∫•y s·ªë ph√≤ng kh·∫£ d·ª•ng
  const getAvailableRoomCount = async () => {
    try {
      console.log('üì° Fetching available room count from:', `${baseURL}/api/rooms/count/available`)
      const response = await $fetch(`${baseURL}/api/rooms/count/available`)
      console.log('‚úÖ Available room count response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching available room count:', error)
      throw error
    }
  }

  // L·∫•y s·ªë ph√≤ng ƒëang s·ª≠ d·ª•ng
  const getOccupiedRoomCount = async () => {
    try {
      console.log('üì° Fetching occupied room count from:', `${baseURL}/api/rooms/count/occupied`)
      const response = await $fetch(`${baseURL}/api/rooms/count/occupied`)
      console.log('‚úÖ Occupied room count response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching occupied room count:', error)
      throw error
    }
  }

  // L·∫•y s·ªë ph√≤ng ƒëang b·∫£o tr√¨
  const getMaintenanceRoomCount = async () => {
    try {
      console.log(
        'üì° Fetching maintenance room count from:',
        `${baseURL}/api/rooms/count/maintenance`
      )
      const response = await $fetch(`${baseURL}/api/rooms/count/maintenance`)
      console.log('‚úÖ Maintenance room count response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching maintenance room count:', error)
      throw error
    }
  }

  // L·∫•y t·ª∑ l·ªá l·∫•p ƒë·∫ßy ph√≤ng
  const getOccupancyRatio = async () => {
    try {
      console.log('üì° Fetching occupancy ratio from:', `${baseURL}/api/rooms/occupancy-ratio`)
      const response = await $fetch(`${baseURL}/api/rooms/occupancy-ratio`)
      console.log('‚úÖ Occupancy ratio response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching occupancy ratio:', error)
      throw error
    }
  }

  // L·∫•y danh s√°ch t·∫•t c·∫£ ph√≤ng
  const getAllRooms = async (page = 0, size = 20) => {
    try {
      console.log('üì° Fetching all rooms from:', `${baseURL}/api/rooms?page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms?page=${page}&size=${size}`)
      console.log('‚úÖ All rooms response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching all rooms:', error)
      throw error
    }
  }

  // L·∫•y th√¥ng tin ph√≤ng theo ID
  const getRoomById = async (roomId: string) => {
    try {
      console.log('üì° Fetching room by ID from:', `${baseURL}/api/rooms/${roomId}`)
      const response = await $fetch(`${baseURL}/api/rooms/${roomId}`)
      console.log('‚úÖ Room by ID response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching room by ID:', error)
      throw error
    }
  }

  // L·∫•y th√¥ng tin ph√≤ng theo s·ªë ph√≤ng
  const getRoomByNumber = async (roomNumber: string) => {
    try {
      console.log('üì° Fetching room by number from:', `${baseURL}/api/rooms/number/${roomNumber}`)
      const response = await $fetch(`${baseURL}/api/rooms/number/${roomNumber}`)
      console.log('‚úÖ Room by number response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching room by number:', error)
      throw error
    }
  }

  // T√¨m ki·∫øm ph√≤ng
  const searchRooms = async (params: RoomSearchParams) => {
    try {
      const queryString = new URLSearchParams()
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          queryString.append(key, value.toString())
        }
      })
      
      console.log('üì° Searching rooms from:', `${baseURL}/api/rooms/search?${queryString}`)
      const response = await $fetch(`${baseURL}/api/rooms/search?${queryString}`)
      console.log('‚úÖ Search rooms response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error searching rooms:', error)
      throw error
    }
  }

  // L·ªçc ph√≤ng theo tr·∫°ng th√°i
  const filterRoomsByStatus = async (status: string, page = 0, size = 20) => {
    try {
      console.log(
        'üì° Filtering rooms by status from:',
        `${baseURL}/api/rooms/filter/status/${status}?page=${page}&size=${size}`
      )
      const response = await $fetch(
        `${baseURL}/api/rooms/filter/status/${status}?page=${page}&size=${size}`
      )
      console.log('‚úÖ Filter rooms by status response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error filtering rooms by status:', error)
      throw error
    }
  }

  // L·ªçc ph√≤ng theo lo·∫°i ph√≤ng
  const filterRoomsByType = async (roomType: string, page = 0, size = 20) => {
    try {
      console.log('üì° Filtering rooms by type from:', `${baseURL}/api/rooms/filter/type/${roomType}?page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms/filter/type/${roomType}?page=${page}&size=${size}`)
      console.log('‚úÖ Filter rooms by type response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error filtering rooms by type:', error)
      throw error
    }
  }

  // L·∫•y ph√≤ng theo lo·∫°i ph√≤ng (s·ª≠ d·ª•ng filter/type endpoint)
  const getRoomsByType = async (roomTypeId: string, page = 0, size = 100) => {
    try {
      // S·ª≠ d·ª•ng endpoint filter/type v·ªõi roomType parameter (endpoint ch√≠nh x√°c t·ª´ backend)
      console.log('üì° Filtering rooms by type ID from:', `${baseURL}/api/rooms/filter/type/${roomTypeId}?page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms/filter/type/${roomTypeId}?page=${page}&size=${size}`)
      console.log('‚úÖ Filter rooms by type response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error filtering rooms by type, trying fallback approach:', error)
      
      // Fallback: L·∫•y t·∫•t c·∫£ ph√≤ng v√† l·ªçc theo type
      try {
        console.log('üîÑ Fallback: Getting all rooms and filtering by type...')
        const allRooms = await getAllRooms(0, 1000) // L·∫•y nhi·ªÅu ph√≤ng h∆°n ƒë·ªÉ l·ªçc
        
        if (allRooms && Array.isArray(allRooms)) {
          const filteredRooms = allRooms.filter((room: any) => room.roomTypeId === roomTypeId || room.roomType?.id === roomTypeId)
          console.log('‚úÖ Filtered rooms by type:', filteredRooms)
          return filteredRooms
        } else if (allRooms && typeof allRooms === 'object' && 'content' in allRooms && Array.isArray((allRooms as any).content)) {
          const filteredRooms = (allRooms as any).content.filter((room: any) => room.roomTypeId === roomTypeId || room.roomType?.id === roomTypeId)
          console.log('‚úÖ Filtered rooms by type (from content):', filteredRooms)
          return filteredRooms
        }
        
        console.warn('‚ö†Ô∏è No rooms found or unexpected response format')
        return []
      } catch (fallbackError) {
        console.error('‚ùå Fallback also failed:', fallbackError)
        throw fallbackError
      }
    }
  }

  // L·∫•y ph√≤ng theo lo·∫°i ph√≤ng (s·ª≠ d·ª•ng filter/type endpoint)
  const getRoomsByTypeFilter = async (roomTypeId: string, page = 0, size = 100) => {
    try {
      // S·ª≠ d·ª•ng endpoint filter/type v·ªõi roomType parameter
      console.log('üì° Filtering rooms by type ID from:', `${baseURL}/api/rooms/filter/type/${roomTypeId}?page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms/filter/type/${roomTypeId}?page=${page}&size=${size}`)
      console.log('‚úÖ Filter rooms by type response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error filtering rooms by type:', error)
      throw error
    }
  }

  // L·∫•y ph√≤ng theo t·∫ßng
  const filterRoomsByFloor = async (floor: number, page = 0, size = 20) => {
    try {
      console.log('üì° Filtering rooms by floor from:', `${baseURL}/api/rooms/filter/floor/${floor}?page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms/filter/floor/${floor}?page=${page}&size=${size}`)
      console.log('‚úÖ Filter rooms by floor response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error filtering rooms by floor:', error)
      throw error
    }
  }

  // L·ªçc ph√≤ng theo kho·∫£ng gi√°
  const filterRoomsByPriceRange = async (minPrice: number, maxPrice: number, page = 0, size = 20) => {
    try {
      console.log('üì° Filtering rooms by price range from:', `${baseURL}/api/rooms/filter/price-range?minPrice=${minPrice}&maxPrice=${maxPrice}&page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms/filter/price-range?minPrice=${minPrice}&maxPrice=${maxPrice}&page=${page}&size=${size}`)
      console.log('‚úÖ Filter rooms by price range response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error filtering rooms by price range:', error)
      throw error
    }
  }

  // L·∫•y danh s√°ch ph√≤ng kh·∫£ d·ª•ng
  const getAvailableRooms = async (params: AvailableRoomParams) => {
    try {
      const queryString = new URLSearchParams()
      Object.entries(params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          queryString.append(key, value.toString())
        }
      })
      
      console.log('üì° Fetching available rooms from:', `${baseURL}/api/rooms/available?${queryString}`)
      const response = await $fetch(`${baseURL}/api/rooms/available?${queryString}`)
      console.log('‚úÖ Available rooms response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching available rooms:', error)
      throw error
    }
  }

  // Ki·ªÉm tra kh·∫£ d·ª•ng c·ªßa ph√≤ng
  const checkRoomAvailability = async (roomId: string) => {
    try {
      console.log('üì° Checking room availability from:', `${baseURL}/api/rooms/${roomId}/availability`)
      const response = await $fetch(`${baseURL}/api/rooms/${roomId}/availability`)
      console.log('‚úÖ Room availability response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error checking room availability:', error)
      throw error
    }
  }

  // L·∫•y danh s√°ch ph√≤ng ƒëang b·∫£o tr√¨
  const getMaintenanceRooms = async (page = 0, size = 20) => {
    try {
      console.log('üì° Fetching maintenance rooms from:', `${baseURL}/api/rooms/maintenance?page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms/maintenance?page=${page}&size=${size}`)
      console.log('‚úÖ Maintenance rooms response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching maintenance rooms:', error)
      throw error
    }
  }

  // L·∫•y danh s√°ch ph√≤ng c·∫ßn d·ªçn d·∫πp
  const getCleaningRooms = async (page = 0, size = 20) => {
    try {
      console.log('üì° Fetching cleaning rooms from:', `${baseURL}/api/rooms/cleaning?page=${page}&size=${size}`)
      const response = await $fetch(`${baseURL}/api/rooms/cleaning?page=${page}&size=${size}`)
      console.log('‚úÖ Cleaning rooms response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching cleaning rooms:', error)
      throw error
    }
  }

  // L·∫•y danh s√°ch t·∫•t c·∫£ t·∫ßng
  const getAllFloors = async () => {
    try {
      console.log('üì° Fetching all floors from:', `${baseURL}/api/rooms/floors`)
      const response = await $fetch(`${baseURL}/api/rooms/floors`)
      console.log('‚úÖ All floors response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching all floors:', error)
      throw error
    }
  }

  // L·∫•y danh s√°ch ph√≤ng theo t·∫ßng
  const getRoomsByFloor = async (floor: number) => {
    try {
      console.log('üì° Fetching rooms by floor from:', `${baseURL}/api/rooms/floor/${floor}`)
      const response = await $fetch(`${baseURL}/api/rooms/floor/${floor}`)
      console.log('‚úÖ Rooms by floor response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching rooms by floor:', error)
      throw error
    }
  }

  // L·∫•y kho·∫£ng gi√° ph√≤ng
  const getRoomPriceRange = async () => {
    try {
      console.log('üì° Fetching room price range from:', `${baseURL}/api/rooms/price-range`)
      const response = await $fetch(`${baseURL}/api/rooms/price-range`)
      console.log('‚úÖ Room price range response:', response)
      return response
    } catch (error) {
      console.error('‚ùå Error fetching room price range:', error)
      throw error
    }
  }

  return {
    // Room Types
    getAllRoomTypes,
    
    // Statistics
    getRoomStatistics,
    getRoomCount,
    getAvailableRoomCount,
    getOccupiedRoomCount,
    getMaintenanceRoomCount,
    getOccupancyRatio,
    
    // Rooms
    getAllRooms,
    getRoomById,
    getRoomByNumber,
    searchRooms,
    filterRoomsByStatus,
    filterRoomsByType,
    getRoomsByType,
    getRoomsByTypeFilter,
    filterRoomsByFloor,
    filterRoomsByPriceRange,
    getAvailableRooms,
    checkRoomAvailability,
    getMaintenanceRooms,
    getCleaningRooms,
    getAllFloors,
    getRoomsByFloor,
    getRoomPriceRange
  }
}
